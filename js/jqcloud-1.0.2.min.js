(function($) {
    $.fn.jQCloud = function(word_array) {
        var $this = this;

        var h = this.height();
        var w = this.width();

        this.css("visibility", "hidden")
        var body = "";
        var l = word_array.length;
        for (var i = 0; i < l; i++) {
            word_array[i]["wc"] = word_array[i].weight;
            var search_r = word_array[i].text;
            if (word_array[i].year > 0) {
                var search_r = word_array[i].text + ' ' + word_array[i].year;
            }
            body += '<span class="w' + word_array[i].weight + '"><a href="#s=' + search_r + '" title="' + search_r + '">' + word_array[i].text + '</a></span>'
        }
        this.html(body);

        var childs = this.children();
        for (var i = 0; i < l; i++) {
            word_array[i]["width"] = childs.eq(i).width() + 10;
            word_array[i]["height"] = childs.eq(i).height() + 5;
            word_array[i]["id"] = i;
        }

        word_array.sort(function(a, b) {
            return (a.wc > b.wc) ? -1 : 1;
        });


        var table_arr = [];
        var a = 0;
        var b = 0;
        var f = -1;
        for (var t = 0; t <= 9; t++) {
            if (f == -1) {
                f = 1;
            }
            if (t % 2) {
                write_line(4 - a, 0, f);
                a++;
            } else {
                write_line(5 + b, 1, f);
                b++;
            }
            if (f == 1) {
                f = 0;
            }
        }
        
        function calc_top(first, line_num, ab, wl, i) {
            var top = 0;
            if (first) {
                top = Math.round(h / 2 - word_array[i]["height"] / 2);
            } else {
                var t_l = line_num + ((ab) ? -1 : 1);
                if (table_arr[t_l] != null) {
                    var max_h = 0;
                    for (var n = wl; n < wl + word_array[i]["width"]; n++) {
                        if (wl in table_arr[t_l]) {
                            if (max_h < table_arr[t_l][wl]) {
                                max_h = table_arr[t_l][wl];
                            }
                        }
                    }
                    if (ab) {
                        top = max_h + word_array[i]["height"];
                        if (t_l == 5) {
                            top += 12;
                        }
                    } else {
                        top = max_h - word_array[i]["height"];
                    }
                }
            }
            return top;
        }

        function write_line(line_num, ab, first) {
            for (var i = 0; i < l; i++) {
                if ("pos" in word_array[i]) {
                    continue;
                }
                var center = 0;
                var c_pos = Math.round(w / 2);
                if (table_arr[line_num] == null) {
                    table_arr[line_num] = {};
                    center = 1;
                }
                if (center) {
                    var wl = c_pos - Math.round(word_array[i]["width"] / 2);
                    var top = calc_top(first, line_num, ab, wl, i);
                    for (var n = wl; n < wl + word_array[i]["width"]; n++) {
                        table_arr[line_num][n] = top;
                    }
                    word_array[i]["pos"] = 1;
                    childs.eq(word_array[i]["id"]).css({"left": wl, "top": top});
                } else
                if (i % 2) {
                    //1,3,5
                    var start = -1;
                    var end = 0;
                    for (var n = c_pos; n > -1; n--) {
                        if (table_arr[line_num][n] == null) {
                            if (start < 0) {
                                start = n - word_array[i]["width"];
                                if (start < 0) {
                                    break;
                                }
                            }
                        } else {
                            if (start > 0) {
                                if (n > start) {
                                    start = -1;
                                }
                            }
                        }
                        if (n == start) {
                            end = 1;
                            break;
                        }
                    }
                    if (start > -1 && end) {
                        var top = calc_top(first, line_num, ab, wl, i);
                        for (var n = start; n <= start + word_array[i]["width"]; n++) {
                            table_arr[line_num][n] = top;
                        }
                        word_array[i]["pos"] = 1;
                        childs.eq(word_array[i]["id"]).css({"left": start, "top": top});
                    }
                } else {
                    //2,4,6
                    var start = -1;
                    var end = 0;
                    for (var n = c_pos; n < w; n++) {
                        if (table_arr[line_num][n] == null) {
                            if (start < 0) {
                                start = n;
                                if (start + word_array[i]["width"] > w) {
                                    break;
                                }
                            }
                        } else {
                            if (start > 0 && n < start + word_array[i]["width"]) {
                                start = -1;
                            }
                        }
                        if (n == start + word_array[i]["width"]) {
                            end = 1;
                            break;
                        }
                    }
                    if (start > -1 && end) {
                        var top = calc_top(first, line_num, ab, wl, i);
                        for (var n = start; n < start + word_array[i]["width"]; n++) {
                            table_arr[line_num][n] = word_array[i]["height"];
                        }
                        word_array[i]["pos"] = 1;
                        childs.eq(word_array[i]["id"]).css({"left": start, "top": top});
                    }
                }
            }
        }
        this.css("visibility", "visible");
        table_arr = null;
        word_array = null;

        return $this;
    };
})(jQuery);